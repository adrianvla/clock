import fs from 'fs';

const t = 0xFFFFFF;
let Fonts = {
    "3x5":{
        "0":[[t,t,t],[t,0,t],[t,0,t],[t,0,t],[t,t,t]],
        "1":[[0,t,0],[t,t,0],[0,t,0],[0,t,0],[t,t,t]],
        "2":[[t,t,t],[0,0,t],[t,t,t],[t,0,0],[t,t,t]],
        "3":[[t,t,t],[0,0,t],[t,t,t],[0,0,t],[t,t,t]],
        "4":[[t,0,t],[t,0,t],[t,t,t],[0,0,t],[0,0,t]],
        "5":[[t,t,t],[t,0,0],[t,t,t],[0,0,t],[t,t,t]],
        "6":[[t,t,t],[t,0,0],[t,t,t],[t,0,t],[t,t,t]],
        "7":[[t,t,t],[0,0,t],[0,0,t],[0,0,t],[0,0,t]],
        "8":[[t,t,t],[t,0,t],[t,t,t],[t,0,t],[t,t,t]],
        "9":[[t,t,t],[t,0,t],[t,t,t],[0,0,t],[t,t,t]],
        "Â°":[[0,t,0],[t,0,t],[0,t,0],[0,0,0],[0,0,0]],
        " ":[[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
        "A":[[t,t,t],[t,0,t],[t,t,t],[t,0,t],[t,0,t]],
        "B":[[t,t,t],[t,0,t],[t,t,0],[t,0,t],[t,t,t]],
        "C":[[t,t,t],[t,0,0],[t,0,0],[t,0,0],[t,t,t]],
        "D":[[t,t,0],[t,0,t],[t,0,t],[t,0,t],[t,t,0]],
        "E":[[t,t,t],[t,0,0],[t,t,0],[t,0,0],[t,t,t]],
        "F":[[t,t,t],[t,0,0],[t,t,0],[t,0,0],[t,0,0]],
        "G":[[t,t,t],[t,0,0],[t,0,t],[t,0,t],[t,t,t]],
        "H":[[t,0,t],[t,0,t],[t,t,t],[t,0,t],[t,0,t]],
        "I":[[t,t,t],[0,t,0],[0,t,0],[0,t,0],[t,t,t]],
        "J":[[0,0,t],[0,0,t],[0,0,t],[t,0,t],[t,t,t]],
        "K":[[t,0,t],[t,0,t],[t,t,0],[t,0,t],[t,0,t]],
        "L":[[t,0,0],[t,0,0],[t,0,0],[t,0,0],[t,t,t]],
        "M":[[t,0,t],[t,t,t],[t,0,t],[t,0,t],[t,0,t]],
        "N":[[t,t,0],[t,0,t],[t,0,t],[t,0,t],[t,0,t]],
        "O":[[t,t,t],[t,0,t],[t,0,t],[t,0,t],[t,t,t]],
        "P":[[t,t,t],[t,0,t],[t,t,t],[t,0,0],[t,0,0]],
        "Q":[[t,t,t],[t,0,t],[t,0,t],[t,t,0],[t,0,t]],
        "R":[[t,t,0],[t,0,t],[t,t,t],[t,0,t],[t,0,t]],
        "S":[[t,t,t],[t,0,0],[t,t,t],[0,0,t],[t,t,t]],
        "T":[[t,t,t],[0,t,0],[0,t,0],[0,t,0],[0,t,0]],
        "U":[[t,0,t],[t,0,t],[t,0,t],[t,0,t],[t,t,t]],
        "V":[[t,0,t],[t,0,t],[t,0,t],[0,t,0],[0,t,0]],
        "W":[[t,0,t],[t,0,t],[t,0,t],[t,t,t],[t,0,t]],
        "X":[[t,0,t],[t,0,t],[0,t,0],[t,0,t],[t,0,t]],
        "Y":[[t,0,t],[t,0,t],[0,t,0],[0,t,0],[0,t,0]],
        "Z":[[t,t,t],[0,0,t],[0,t,0],[t,0,0],[t,t,t]],
        ":":[[0,0,0],[0,t,0],[0,0,0],[0,0,0],[0,t,0]],
        "-":[[0,0,0],[0,0,0],[t,t,t],[0,0,0],[0,0,0]],
        ".":[[0,0,0],[0,0,0],[0,0,0],[0,t,0],[0,0,0]],
        "/":[[0,0,t],[0,0,t],[0,t,0],[t,0,0],[t,0,0]]
    },
    "5x5":{
        "0":[[t,t,t,t,t],[t,0,0,0,t],[t,0,0,0,t],[t,0,0,0,t],[t,t,t,t,t]],
        "1":[[0,0,t,0,0],[0,t,t,0,0],[0,0,t,0,0],[0,0,t,0,0],[t,t,t,t,t]],
        "2":[[t,t,t,t,t],[0,0,0,0,t],[t,t,t,t,t],[t,0,0,0,0],[t,t,t,t,t]],
        "3":[[t,t,t,t,t],[0,0,0,0,t],[t,t,t,t,t],[0,0,0,0,t],[t,t,t,t,t]],
        "4":[[t,0,0,0,t],[t,0,0,0,t],[t,t,t,t,t],[0,0,0,0,t],[0,0,0,0,t]],
        "5":[[t,t,t,t,t],[t,0,0,0,0],[t,t,t,t,t],[0,0,0,0,t],[t,t,t,t,t]],
        "6":[[t,t,t,t,t],[t,0,0,0,0],[t,t,t,t,t],[t,0,0,0,t],[t,t,t,t,t]],
        "7":[[t,t,t,t,t],[0,0,0,0,t],[0,0,0,t,0],[0,0,t,0,0],[0,0,t,0,0]],
        "8":[[t,t,t,t,t],[t,0,0,0,t],[t,t,t,t,t],[t,0,0,0,t],[t,t,t,t,t]],
        "9":[[t,t,t,t,t],[t,0,0,0,t],[t,t,t,t,t],[0,0,0,0,t],[0,0,0,0,t]],
        " ":[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]],
        "A":[[t,t,t,t,t],[t,0,0,0,t],[t,0,0,0,t],[t,t,t,t,t],[t,0,0,0,t]],
        "B":[[t,t,t,t,t],[t,0,0,0,t],[t,t,t,t,0],[t,0,0,0,t],[t,t,t,t,t]],
        "C":[[t,t,t,t,t],[t,0,0,0,0],[t,0,0,0,0],[t,0,0,0,0],[t,t,t,t,t]],
        "D":[[t,t,t,t,0],[t,0,0,0,t],[t,0,0,0,t],[t,0,0,0,t],[t,t,t,t,0]],
        "E":[[t,t,t,t,t],[t,0,0,0,0],[t,t,t,t,t],[t,0,0,0,0],[t,t,t,t,t]],
        "F":[[t,t,t,t,t],[t,0,0,0,0],[t,t,t,t,t],[t,0,0,0,0],[t,0,0,0,0]],
        "G":[[t,t,t,t,t],[t,0,0,0,0],[t,0,t,t,t],[t,0,0,0,t],[t,t,t,t,t]],
        "H":[[t,0,0,0,t],[t,0,0,0,t],[t,t,t,t,t],[t,0,0,0,t],[t,0,0,0,t]],
        "I":[[0,t,t,t,0],[0,0,t,0,0],[0,0,t,0,0],[0,0,t,0,0],[0,t,t,t,0]],
        "J":[[t,t,t,t,t],[0,0,0,0,t],[0,0,0,0,t],[t,0,0,0,t],[t,t,t,t,t]],
        "K":[[t,0,0,0,t],[t,0,0,t,0],[t,t,t,0,0],[t,0,0,t,0],[t,0,0,0,t]],
        "L":[[t,0,0,0,0],[t,0,0,0,0],[t,0,0,0,0],[t,0,0,0,0],[t,t,t,t,t]],
        "M":[[t,0,0,0,t],[t,t,0,t,t],[t,0,t,0,t],[t,0,0,0,t],[t,0,0,0,t]],
        "N":[[t,t,t,t,0],[t,0,0,0,t],[t,0,0,0,t],[t,0,0,0,t],[t,0,0,0,t]],
        "O":[[t,t,t,t,t],[t,0,0,0,t],[t,0,0,0,t],[t,0,0,0,t],[t,t,t,t,t]],
        "P":[[t,t,t,t,t],[t,0,0,0,t],[t,t,t,t,t],[t,0,0,0,0],[t,0,0,0,0]],
        "Q":[[t,t,t,t,t],[t,0,0,0,t],[t,0,0,0,t],[t,0,0,t,0],[t,t,t,0,t]],
        "R":[[t,t,t,t,t],[t,0,0,0,t],[t,t,t,t,t],[t,0,0,t,0],[t,0,0,0,t]],
        "S":[[t,t,t,t,t],[t,0,0,0,0],[t,t,t,t,t],[0,0,0,0,t],[t,t,t,t,t]],
        "T":[[t,t,t,t,t],[0,0,t,0,0],[0,0,t,0,0],[0,0,t,0,0],[0,0,t,0,0]],
        "U":[[t,0,0,0,t],[t,0,0,0,t],[t,0,0,0,t],[t,0,0,0,t],[t,t,t,t,t]],
        "V":[[t,0,0,0,t],[t,0,0,0,t],[t,0,0,0,t],[0,t,0,t,0],[0,0,t,0,0]],
        "W":[[t,0,0,0,t],[t,0,0,0,t],[t,0,t,0,t],[t,t,0,t,t],[t,0,0,0,t]],
        "X":[[t,0,0,0,t],[0,t,0,t,0],[0,0,t,0,0],[0,t,0,t,0],[t,0,0,0,t]],
        "Y":[[t,0,0,0,t],[0,t,0,t,0],[0,0,t,0,0],[0,0,t,0,0],[0,0,t,0,0]],
        "Z":[[t,t,t,t,t],[0,0,0,0,t],[0,t,t,t,0],[t,0,0,0,0],[t,t,t,t,t]],
        ":":[[0,0,0,0,0],[0,t,0,0,0],[0,0,0,0,0],[0,t,0,0,0],[0,0,0,0,0]],
        "-":[[0,0,0,0,0],[0,0,0,0,0],[t,t,t,0,0],[0,0,0,0,0],[0,0,0,0,0]],
        ".":[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,t,0,0,0]],
        "/":[[0,0,0,0,t],[0,0,0,t,0],[0,0,t,0,0],[0,t,0,0,0],[t,0,0,0,0]]
    }
};

function parseBDF(path) {
  const bdf = fs.readFileSync(path, "utf8");
  const lines = bdf.split("\n");

  const glyphs = {};
  let char = null;
  let bitmap = [];
  let capturing = false;

  for (let line of lines) {
    if (line.startsWith("ENCODING")) {
      const code = parseInt(line.split(" ")[1]);
      // Skip undefined or control characters
      if (code < 32 || code > 0xFFFF) {
        char = null;
        continue;
      }
      char = String.fromCodePoint(code);
    }

    if (line.startsWith("BITMAP")) {
      capturing = true;
      bitmap = [];
      continue;
    }

    if (line.startsWith("ENDCHAR")) {
      if (char && bitmap.length > 0) {
        glyphs[char] = bitmap;
      }
      capturing = false;
      char = null;
      bitmap = [];
      continue;
    }

    if (capturing && /^[0-9A-Fa-f]+$/.test(line.trim())) {
      const bits = parseInt(line.trim(), 16)
        .toString(2)
        .padStart(8, "0")
        .slice(0, 8)
        .split("")
        .map(b => (b === "1" ? t : 0));
      bitmap.push(bits);
    }
  }

  return glyphs;
}


//print current directory
Fonts["8x8"] = parseBDF("./src/assets/misaki_gothic_2nd.bdf");


export {Fonts};